apply plugin: 'maven-publish'
apply plugin: 'signing'

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact testsJar
            artifact docsJar

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'Jenkins Rest')
                root.appendNode('description', 'Java client for working with Jenkins REST API.')
                root.appendNode('url', 'https://github.com/jrestclients/jenkins-rest')
                root.appendNode('inceptionYear', '2016')

                def scm = root.appendNode('scm')
                scm.appendNode('url', 'https://github.com/jrestclients/jenkins-rest')
                scm.appendNode('connection', 'scm:https://martinda@github.com/jrestclients/jenkins-rest.git')
                scm.appendNode('developerConnection', 'scm:git://github.com/jrestclients/jenkins-rest.git')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'The Apache Software License, Version 2.0')
                license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                license.appendNode('distribution', 'repo')

                def developers = root.appendNode('developers')
                def cdancy = developers.appendNode('developer')
                cdancy.appendNode('id', 'cdancy')
                cdancy.appendNode('name', 'Christopher Dancy')
                cdancy.appendNode('email', 'christoforever@gmail.com')
                def martinda = developers.appendNode('developer')
                martinda.appendNode('id', 'martinda')
                martinda.appendNode('name', "Martin d'Anjou")
                martinda.appendNode('email', 'martin.danjou14@gmail.com')
            }
        }
    }
}

// To get the list of all pgp packets
// gpg -a --export <keyid> | gpg --list-packets --verbose
// To get the list of all keys and subkeys
// gpg --keyid-format LONG --list-keys
// How I got the password: ran this until all chars could be echo'ed on the command line without
// causing trouble with bash
// tr -cd '[:graph:]' < /dev/urandom | head -c 40
signing {
    boolean signPublication = findProperty("signPublication")?.toBoolean()
    def signingKeyId = findProperty("signingKeyId")
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    required {
        println("signPublication: " + signPublication)
        println("SNAPSHOT: " + version.endsWith("SNAPSHOT"))
        println(":publishToSonatyep: " + gradle.taskGraph.hasTask(":publishToSonatype"))
        println(":publishToMavenLocal: " +gradle.taskGraph.hasTask(":publishToMavenLocal"))
        println("signingKeyId: " + signingKeyId == null)
        println("signingKey: " + signingKey == null)
        println("signingPassword: " + signingPassword == null)
        boolean doSign = signPublication && (!version.endsWith("SNAPSHOT") && (gradle.taskGraph.hasTask(":publishToSonatype") || gradle.taskGraph.hasTask(":publishToMavenLocal")))
        println("doSign: " + doSign)
        if (doSign && signingKeyId == null) {
            throw new InvalidUserDataException('signingKeyId is null. Define it with: export ORG_GRADLE_PROJECT_signingKeyId=<8-char key id>')
        }
        if (doSign && signingKey == null) {
            throw new InvalidUserDataException('signingKey is null. Define it with: export ORG_GRADLE_PROJECT_signingKey=$(gpg --armor --export-secret-key <8-char key id>)')
        }
        if (doSign && signingPassword == null) {
            throw new InvalidUserDataException('signingPassword property is null. Define it with export ORG_GRADLE_PROJECT_signingPassword=<password>')
        }
        doSign
    }
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign publishing.publications.mavenJava
}
